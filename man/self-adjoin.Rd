% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/self_adjoin.R
\name{self-adjoin}
\alias{self-adjoin}
\alias{self_adjoin}
\title{Adjoin a dataset to itself}
\usage{
self_adjoin(
  data,
  key,
  by = NULL,
  link = NULL,
  keep.x = NULL,
  keep.y = NULL,
  suffix = c(".x", ".y")
)
}
\arguments{
\item{data}{A data frame in lodes form (repeated measures data; see
[`alluvial-data`]).}

\item{key}{Column of `data` indicating sequential collection; handled as in
[tidyr::spread()].}

\item{by}{Character vector of variables to self-adjoin by; passed to
[`dplyr::mutate-joins`] functions.}

\item{link}{Character vector of variables to adjoin. Will be replaced by
pairs of variables suffixed by `suffix`.}

\item{keep.x, keep.y}{Character vector of variables to associate with the
first (respectively, second) copy of `data` after adjoining. These
variables can overlap with each other but cannot overlap with `by` or
`link`.}

\item{suffix}{Suffixes to add to the adjoined `link` variables; passed to
[`dplyr::mutate-joins`] functions.}
}
\description{
ggproto class for ggiraph.


This function binds a dataset to itself along adjacent pairs of a `key`
variable. It is invoked by [geom_flow()] to convert data in lodes
form to something similar to alluvia form.

In contrast to ggalluvial::self_adjoin it also works with unregular coloumn names,
which is necessary when "data-id" is passed to extra_interactive_params in an
interactive plot.

`self_adjoin` invokes [`dplyr::mutate-joins`] functions in order to convert
a dataset with measures along a discrete `key` variable into a dataset
consisting of column bindings of these measures (by any `by` variables) along
adjacent values of `key`.
}
\examples{
#
#
}
\concept{alluvial data manipulation}
